-> Syntax for CREATE
CREATE TABLE Employee (
    EmpID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Salary DECIMAL(10, 2),
    DeptID INT
);

-> Syntax for ALTER
ALTER TABLE Employee
ADD Email VARCHAR(100);

-> Syntax for DROP
DROP TABLE Employee;

-> Syntax for SELECT
SELECT EmpID, FirstName, LastName, Salary, DeptID
FROM Employee;

-> Syntax for INSERT
INSERT INTO Employee (EmpID, FirstName, LastName, Salary, DeptID)
VALUES (101, 'John', 'Doe', 55000.00, 2);

-> Syntax for UPDATE
UPDATE Employee
SET Salary = 60000
WHERE EmpID = 101;

-> Syntax for DELETE
DELETE FROM Employee
WHERE EmpID = 101;

-> Syntax for GRANT
GRANT SELECT ON Employee TO John;

-> Syntax for REVOKE
REVOKE SELECT ON Employee FROM John;

-> Transaction Flow:
BEGIN;  -- Start transaction

UPDATE Employee
SET Salary = 65000
WHERE EmpID = 102;

COMMIT;  -- Commit the transaction
ROLLBACK;  -- Uncomment to roll back the transaction instead of committing

-> Syntax for Inner Joins:
SELECT e.EmpID, e.FirstName, d.DeptName
FROM Employee e
INNER JOIN Department d
ON e.DeptID = d.DeptID;

-> Syntax for Left Outer joins:
SELECT e.EmpID, e.FirstName, d.DeptName
FROM Employee e
LEFT JOIN Department d
ON e.DeptID = d.DeptID;

-> Syntax for Right Outer Join:
SELECT e.EmpID, e.FirstName, d.DeptName
FROM Employee e
RIGHT JOIN Department d
ON e.DeptID = d.DeptID;

-> Full Join:
SELECT e.EmpID, e.FirstName, d.DeptName
FROM Employee e
FULL JOIN Department d
ON e.DeptID = d.DeptID;

-> Cross Join:
SELECT e.FirstName, d.DeptName
FROM Employee e
CROSS JOIN Department d;

-> SubQuery Example:
SELECT EmpID, FirstName
FROM Employee
WHERE DeptID = (SELECT DeptID FROM Department WHERE DeptName = 'HR');

-> Correlated Subquery example:
SELECT e.EmpID, e.FirstName
FROM Employee e
WHERE e.Salary > (SELECT AVG(Salary) FROM Employee WHERE DeptID = e.DeptID);

-> UNION
SELECT FirstName FROM Employee WHERE DeptID = 1
UNION
SELECT FirstName FROM Employee WHERE DeptID = 2;

-> INTERSECT
SELECT FirstName FROM Employee WHERE DeptID = 1
INTERSECT
SELECT FirstName FROM Employee WHERE DeptID = 2;

-> EXCEPT
SELECT FirstName FROM Employee WHERE DeptID = 1
EXCEPT
SELECT FirstName FROM Employee WHERE DeptID = 2;

-> Syntax for Window Functions:

1. ROW_NUMBER()
Assigns a unique row number to each row within a partition.
SELECT EmpID, FirstName, Salary,
       ROW_NUMBER() OVER (ORDER BY Salary DESC) AS RowNum
FROM Employee;

2. RANK()
Assigns a rank to each row within a partition, with gaps in ranking for ties.
SELECT EmpID, FirstName, Salary,
       RANK() OVER (ORDER BY Salary DESC) AS Rank
FROM Employee;

3. DENSE_RANK()
Similar to RANK(), but without gaps in ranking.
SELECT EmpID, FirstName, Salary,
       DENSE_RANK() OVER (ORDER BY Salary DESC) AS DenseRank
FROM Employee;

4. NTILE(): Divides the result set into a specified number of groups and assigns a bucket number to each row.
SELECT EmpID, FirstName, Salary,
       NTILE(4) OVER (ORDER BY Salary DESC) AS Quartile
FROM Employee;

5. LAG(): Returns the value of a column from a previous row within the same result set.
SELECT EmpID, FirstName, Salary,
       LAG(Salary, 1) OVER (ORDER BY Salary DESC) AS PrevSalary
FROM Employee;

-> Examples of CTE and Recursive CTEs

CTE:
WITH DepartmentSalary AS (
    SELECT DeptID, AVG(Salary) AS AvgSalary
    FROM Employee
    GROUP BY DeptID
)
SELECT e.EmpID, e.FirstName, e.Salary, d.AvgSalary
FROM Employee e
JOIN DepartmentSalary d
ON e.DeptID = d.DeptID
WHERE e.Salary > d.AvgSalary;

Recursive CTE:
WITH RECURSIVE OrgChart AS (
    SELECT EmpID, FirstName, ManagerID
    FROM Employee
    WHERE ManagerID IS NULL
    UNION ALL
    SELECT e.EmpID, e.FirstName, e.ManagerID
    FROM Employee e
    JOIN OrgChart o
    ON e.ManagerID = o.EmpID
)
SELECT * FROM OrgChart;

-> Examples of Pivoting and Unpivoting Data:

Pivot:
SELECT DeptID, 
       SUM(CASE WHEN Month = 'Jan' THEN Salary ELSE 0 END) AS JanSalary,
       SUM(CASE WHEN Month = 'Feb' THEN Salary ELSE 0 END) AS FebSalary
FROM Employee
GROUP BY DeptID;

Unpivot:
SELECT DeptID, Month, Salary
FROM (
    SELECT DeptID, JanSalary, FebSalary
    FROM Employee
) AS SourceTable
UNPIVOT (
    Salary FOR Month IN (JanSalary, FebSalary)
) AS Unpivoted;







